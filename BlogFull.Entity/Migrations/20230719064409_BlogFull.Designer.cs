// <auto-generated />
using System;
using BlogFull.Entity.Context.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlogFull.Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230719064409_BlogFull")]
    partial class BlogFull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogFull.Entity.Models.Blog.BlogCreate", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("BlogId");

                    b.ToTable("BlogsCreate");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BlogCreate");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Blog.BlogPaging", b =>
                {
                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.Property<int>("PageSize")
                        .HasColumnType("integer");

                    b.ToTable("BlogsPaging");
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Blog.PagedResults<BlogFull.Entity.Models.Blog.Blog>", b =>
                {
                    b.Property<int>("TotalCount")
                        .HasColumnType("integer");

                    b.ToTable("PagesResults");
                });

            modelBuilder.Entity("BlogFull.Entity.Models.BlogComment.BlogCommentCreate", b =>
                {
                    b.Property<int>("BlogCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BlogCommentId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentBlogCommentId")
                        .HasColumnType("integer");

                    b.HasKey("BlogCommentId");

                    b.ToTable("BlogsCommentCreate");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BlogCommentCreate");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Exception.ApiException", b =>
                {
                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.ToTable("ApisException");
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Photo.PhotoCreate", b =>
                {
                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicId")
                        .HasColumnType("text");

                    b.HasKey("ImageUrl");

                    b.ToTable("photosCreate");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PhotoCreate");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Settings.CloudinaryOptions", b =>
                {
                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<string>("ApiSecret")
                        .HasColumnType("text");

                    b.Property<string>("CloudName")
                        .HasColumnType("text");

                    b.HasKey("ApiKey");

                    b.ToTable("CloudinaryOptions");
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Users.UserLogin", b =>
                {
                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.ToTable("UsersLogin");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserLogin");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Blog.Blog", b =>
                {
                    b.HasBaseType("BlogFull.Entity.Models.Blog.BlogCreate");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Blog");
                });

            modelBuilder.Entity("BlogFull.Entity.Models.BlogComment.BlogComment", b =>
                {
                    b.HasBaseType("BlogFull.Entity.Models.BlogComment.BlogCommentCreate");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("BlogComment");
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Photo.Photo", b =>
                {
                    b.HasBaseType("BlogFull.Entity.Models.Photo.PhotoCreate");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Photo");
                });

            modelBuilder.Entity("BlogFull.Entity.Models.Users.UserRegister", b =>
                {
                    b.HasBaseType("BlogFull.Entity.Models.Users.UserLogin");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FullName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasDiscriminator().HasValue("UserRegister");
                });
#pragma warning restore 612, 618
        }
    }
}
